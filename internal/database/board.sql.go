// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board.sql

package database

import (
	"context"
	"encoding/json"
)

const createMove = `-- name: CreateMove :exec
INSERT INTO board(board, move, white_time, black_time, match_id, created_at)
VALUES(
  $1,
  $2,
  $3,
  $4,
  $5,
  NOW()
)
`

type CreateMoveParams struct {
	Board     json.RawMessage
	Move      string
	WhiteTime int32
	BlackTime int32
	MatchID   int32
}

func (q *Queries) CreateMove(ctx context.Context, arg CreateMoveParams) error {
	_, err := q.db.ExecContext(ctx, createMove,
		arg.Board,
		arg.Move,
		arg.WhiteTime,
		arg.BlackTime,
		arg.MatchID,
	)
	return err
}

const getAllMovesForMatch = `-- name: GetAllMovesForMatch :many
SELECT move FROM board WHERE match_id = $1
`

func (q *Queries) GetAllMovesForMatch(ctx context.Context, matchID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllMovesForMatch, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var move string
		if err := rows.Scan(&move); err != nil {
			return nil, err
		}
		items = append(items, move)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardForMove = `-- name: GetBoardForMove :one
SELECT board, white_time, black_time FROM board WHERE match_id = $1 AND move = $2
`

type GetBoardForMoveParams struct {
	MatchID int32
	Move    string
}

type GetBoardForMoveRow struct {
	Board     json.RawMessage
	WhiteTime int32
	BlackTime int32
}

func (q *Queries) GetBoardForMove(ctx context.Context, arg GetBoardForMoveParams) (GetBoardForMoveRow, error) {
	row := q.db.QueryRowContext(ctx, getBoardForMove, arg.MatchID, arg.Move)
	var i GetBoardForMoveRow
	err := row.Scan(&i.Board, &i.WhiteTime, &i.BlackTime)
	return i, err
}

const getNumberOfMovesPerMatch = `-- name: GetNumberOfMovesPerMatch :one
SELECT COUNT(*) FROM board WHERE match_id = $1
`

func (q *Queries) GetNumberOfMovesPerMatch(ctx context.Context, matchID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfMovesPerMatch, matchID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
