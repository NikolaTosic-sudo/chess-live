// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: matches.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches(white, black, full_time, is_online, result, created_at)
VALUES(
  $1,
  $2,
  $3,
  $4,
  $5,
  NOW()
) RETURNING id
`

type CreateMatchParams struct {
	White    string
	Black    string
	FullTime int32
	IsOnline bool
	Result   string
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.White,
		arg.Black,
		arg.FullTime,
		arg.IsOnline,
		arg.Result,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAllMatchesForUser = `-- name: GetAllMatchesForUser :many
SELECT id, white, black, full_time, is_online, result, ended, created_at FROM matches WHERE id IN (
 SELECT match_id FROM matches_users WHERE user_id = $1
) ORDER BY created_at DESC LIMIT 30
`

func (q *Queries) GetAllMatchesForUser(ctx context.Context, userID uuid.UUID) ([]Match, error) {
	rows, err := q.db.QueryContext(ctx, getAllMatchesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.White,
			&i.Black,
			&i.FullTime,
			&i.IsOnline,
			&i.Result,
			&i.Ended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMatchById = `-- name: GetMatchById :one
SELECT id, white, black, full_time, is_online, result, ended, created_at FROM matches WHERE id = $1
`

func (q *Queries) GetMatchById(ctx context.Context, id int32) (Match, error) {
	row := q.db.QueryRowContext(ctx, getMatchById, id)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.White,
		&i.Black,
		&i.FullTime,
		&i.IsOnline,
		&i.Result,
		&i.Ended,
		&i.CreatedAt,
	)
	return i, err
}

const updateMatchOnEnd = `-- name: UpdateMatchOnEnd :exec
UPDATE matches SET ended = true, result = $1
WHERE id = $2
`

type UpdateMatchOnEndParams struct {
	Result string
	ID     int32
}

func (q *Queries) UpdateMatchOnEnd(ctx context.Context, arg UpdateMatchOnEndParams) error {
	_, err := q.db.ExecContext(ctx, updateMatchOnEnd, arg.Result, arg.ID)
	return err
}
