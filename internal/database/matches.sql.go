// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: matches.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches(white, black, full_time, user_id, created_at)
VALUES(
  $1,
  $2,
  $3,
  $4,
  NOW()
) RETURNING id
`

type CreateMatchParams struct {
	White    string
	Black    string
	FullTime int32
	UserID   uuid.UUID
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.White,
		arg.Black,
		arg.FullTime,
		arg.UserID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAllMatchesForUser = `-- name: GetAllMatchesForUser :many
SELECT id, white, black, full_time, user_id, created_at FROM matches WHERE user_id = $1
`

func (q *Queries) GetAllMatchesForUser(ctx context.Context, userID uuid.UUID) ([]Match, error) {
	rows, err := q.db.QueryContext(ctx, getAllMatchesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.White,
			&i.Black,
			&i.FullTime,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
