// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(
  token,
  created_at,
  updated_at,
  user_id,
  expires_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteTokens = `-- name: DeleteTokens :exec
DELETE FROM refresh_tokens
`

func (q *Queries) DeleteTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTokens)
	return err
}

const refreshToken = `-- name: RefreshToken :one
UPDATE refresh_tokens
SET token = $1, expires_at = $2, updated_at = $3
WHERE user_id = $4
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RefreshTokenParams struct {
	Token     string
	ExpiresAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) RefreshToken(ctx context.Context, arg RefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, refreshToken,
		arg.Token,
		arg.ExpiresAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET revoked_at = $1, updated_at = $1
WHERE token = $2
`

type RevokeTokenParams struct {
	RevokedAt sql.NullTime
	Token     string
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.RevokedAt, arg.Token)
	return err
}

const searchForToken = `-- name: SearchForToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens WHERE token = $1
`

func (q *Queries) SearchForToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, searchForToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
